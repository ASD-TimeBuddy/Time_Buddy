trigger:
  - main
  - internal/*

stages:
  - stage: ServerCI
    displayName: "Server Continuous Integration"
    jobs:
      - job: Test
        displayName: "Test the API"

        pool:
          vmImage: ubuntu-latest

        strategy:
          matrix:
            Python38:
              PYTHON_VERSION: "3.8"
          maxParallel: 4

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PYTHON_VERSION)
              architecture: "x64"

          - script: |
              python -m pip install --upgrade pip setuptools wheel
              pip install -r requirements.txt
              pip install unittest-xml-reporting
            displayName: "Install prerequisites"

          - script: |
              pushd '$(projectRoot)'
              python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
            displayName: "Run tests"
  
      - job: Build
        dependsOn: Test
        displayName: Build the API

        pool:
          vmImage: ubuntu-latest

        steps:
          - task: Docker@2
            displayName: Login to Docker
            inputs:
              containerRegistry: 'bebopbamfDockerHub'
              command: 'login'
          
          - task: Docker@2
            displayName: Build and Push Docker Image
            inputs:
              containerRegistry: 'bebopbamfDockerHub'
              repository: 'bebopbamf/time-buddy'
              command: 'buildAndPush'
              Dockerfile: './Dockerfile'
              buildContext: '.'
              tags: |
                build-$(Build.BuildId)
                latest

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: ./app-spec.yml
              ArtifactName: app-spec.yml

  - stage: ServerCD
    displayName: 'Deploy Client to Cloudflare'
    dependsOn: ServerCI
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: DeployServer
    
        pool:
          vmImage: ubuntu-latest
    
        environment: Server

        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: app-spec.yml
          
                - script: |
                    curl -OL https://github.com/digitalocean/doctl/releases/download/v1.84.0/doctl-1.84.0-linux-amd64.tar.gz
                    tar -xvf doctl-1.84.0-linux-amd64.tar.gz
                    mv ./doctl /usr/local/bin
                  displayName: 'Install Doctl CLI tool'

                - script: doctl apps update $APPID --spec $(Pipeline.Workspace)/app-spec.yml -t $TOKEN
                  displayName: 'Deploy App'
                  env:
                    TOKEN: $(apiToken)

